string.size() - podaje rozmiar stringa. Ilość elementów w stringu.
string.capacity() - podaje zabieraną pamięć przez stringa. Ilość rezerwowanej przestrzeni w RAM
string.shrink_to_fit() - dopasuje rozmiar rezerwowanej pamięci do ilości elementów w stringu
string.reserve(57) - określamy (57) pamięci rezerwowanej
string.empty() - zwraca 0 (false) jeśli nie jest pusty string
string(s1) - na wzór s1. kopiuje obiekt i jego właściwości, nie tylko znaki.
string(t,8) - pierwsze 8 znaków z obiektu t
string(100,'*') - wypełnia 100ma gwiazdkami
string(s2,6,8) - wypełnia od 6 do ósmego miejsca ze stringa s2


przeciążenie funkcji. Wprowadzenie tej samej nazwy funkcji z innymi parametrami 
i kompilator ma wybrać ze względu na
wprowadzone parametry, którą funkcję użyje.

erase(nr_od,nr_ile); - zwraca "referencję do"
erase(adres_od,adres_do); - zwraca"adres następnmego znaku

referencje - przezwisko na zmienną. a=2, b=&a, a=3;  jeśli w a dokonała się zmiana, to w b
też dokona się zmiana. Jeden obiekt, ale pod różnymi nazwami. 
Po chuj jest wskaźnik? - nie wiem, choć się domyślam. kiedy w cpp robimy klamerki z chujkami, to zmienne
ograniczają się do przestrzeni w klamerkach.

{int* a = 2
cout<< a; 
}
a!=2

i będzie banglać

wskaźnik odwołuje się do konkretnej komórki w pamięci. WIęc jeśli później się do niego odwołamy
to będzie działało dokładnie na tym miejscu w pamięci.

begin(); - zwraca adres początku, zerowej pozycji
end(); zwraca adres za ostatnim elementem

0  miejsce w tablicach pochodzi od wzoru na obliczanie pozycji zarezerwowanych danych w pamięci

#include <iostream>
#include <string>
#include <algorithm>

using namespace std;

int main() {
	string s = "TO jest dobry przykład";
	cout << s << '\n';

	s.erase(0, 3); //"usuń to
	cout << s << '\n';

	s.erase(std::find(s.begin(), s.end(), ' ')); //usuń pierwszą spację
	cout << s << '\n';

	s.erase(s.find(' ')); //znajdź kolejną i usuń wszystko od niej do końca
	for (auto n : s)cout << n << "-"; //literka po literce
	
}


ZARZĄDZANIE WĄTKAMI - biblioteka thread - wyścig wątków

#include <iostream>
#include <string>
#include <thread>

using namespace std;


	
	void addstring(unsigned n, string& s) {
		while (n--) {
			s += "*"; cout << "A";
		}
	}
	void removestring(string& s) {
		while (!s.empty()) {
			s.erase(s.end() - 1); cout << "B";
		}
	}
int main() {

	string m;
	thread t1(addstring, 100, ref(m));  //ref(m)  - wykonuj dopóki istnieje element m
	thread t2(removestring, ref(m));
	t1.join();
	t2.join();
	cout << endl << m << endl;

}



LOSOWOŚĆ - ZAMIENNIK NOWY SRANDA

#include <iostream>
#include <string>
#include <random>
#include <ctime>

using namespace std;


	

int main() {
	random_device rd;		//tylko raz na początku
	mt19937_64 gen(rd());	//seed z rd
	//można też tak:
	//mt19937::result_type seed = time(0);
	//mt19937_64 gen(seed);
	/*generator płaski w oparciu o typ <short>*/

	uniform_int_distribution<short>dis;

	/*kilka liczb, konwertujemy na string*/

	for (auto n = 0; n < 10; ++n)
		cout << dis(gen) << ' ' << to_string(dis(gen)) << ' ';
	endl(cout);

}

